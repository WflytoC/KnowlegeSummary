####ES6的基础

一.常量：

```
const pizza = true;
```

二.let关键字

使用let关键字，可以让变量的作用域在代码块中。

三.模板字符串(template string)

使用${}来进行插值，记住使用``来引用字符串。

```
var name = "Hello,World";
document.body.innerHTML = `
	<p>${name}</p>
`;
```

四.默认的参数

可以为函数参数声明默认的值：

```
function logName(name = "Winter") {
	console.log(`Current season is ${name}`);
}

logName();
```

五.箭头函数

```
var lordify = firstName => `${firstName} of Canterbury`;
```

####ES6的对象与数组

一.Destructuring Assignment(解构赋值)

解构赋值可以从对象中获取某些可以在本地使用的字段。

```
var sandwich = {
	bread: "dutch crunch",
	meat: "tuna",
	cheese: "swiss",
	topping: ["lettuce","tomato","mustard"]
};

var {bread,meat} = sandwich;
```

数值也可以从数组中解构出来，使用列表匹配来过滤掉不必要的数值。

```
var [,,thirdResort] = ["KirKwood","Squaw","Alpine"];
console.log(thirdResort);
```

二.Object Literal Enhancement

从作用域中获取变量，然后将它们转化成一个对象。

```
var name = "Tallac";
var elevation = 9738;
var funHike = {name,elevation};
console.log(funHike); //{ name: "Tallac", elevation: 9738 }
```

三.Spread Operator

Spread Operator是...，可以执行几个不同的任务：

* 结合数组的内容

```
var peaks = ["Tallac","Ralston","Rose"];
var canyons = ["Ward","Blackwood"];
var tahoe = [...peaks,...canyons];
console.log(tahoe);
```

* 拷贝数组，然后操作(不会改变原始的数组)

```
var peaks = ["Tallac","Ralston","Rose"];
var [last] = [...peaks].reverse();
console.log(last);
console.log(peaks.join(','));
```

* 获取数组的部分或剩余的元素

```
var peaks = ["Tallac","Ralston","Rose"];
var [first,...rest] = peaks;
console.log(rest);
```
* 将函数参数收集成数组，或者构建接收n个参数的函数


####Promise

Promise是一个对象，用来传递异步操作的消息。它代表了某个未来才会知道结果的事件（通常是一个异步操作），并且这个事件提供统一的 API，可供进一步处理。

Promise 构造函数接受一个函数作为参数，该函数的两个参数分别是 resolve 方法和 reject 方法。

####Class

```
class Vacation {
	constructor(destination,length) {
		this.destination = destination;
		this.length = length;
	}
	print() {
		console.log(`${this.destination} will take ${this.length} days`);
	}
}

const trip = new Vacation("santiago,Chile",7);
trip.print();

class Expedition extends Vacation {
	constructor(destination,length,gear) {
		super(destination,length);
		this.gear = gear
	}
	print() {
		super.print();
		console.log(`Bring your ${this.gear.join(" and your ")}`);
	}
}

const Gear = new Expedition("Mt. Whiteney",3,["sunglasses","camera"]);
Gear.print();
```

####ES6 模块

一.export
从单个模块中导出多个JavaScript对象：

```
export const print(message) => log(message,new Date())

export const log(message,timestamp) => console.log(`${timestamp.toString()}： ${message}}`)
```

从单个模块中导出一个JavaScript对象：

```
const freel = new Expedition("name");
export default freel;
```

二.import

拥有多个导出的模块可以使用对象解构处理：

```
import {print,log} from '"./text-helpers";
```

使用export default的模块可以被导入到单个变量中：

```
import freel from "./mt-freel";
```










































































































































